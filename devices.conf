{
    "ignore_devices": [
        "alarms", "wbrules"
    ],
    "valid": {
        "drivers": ["wb-modbus", "wb-w1", "wb-rules", "wb-gpio", "wb-adc"],
        "device_meta": ["name", "driver"],
        "control_meta": ["name", "type", "readonly", "min", "max"],
        "device": {
            "keys": ["id", "name", "enabled", "custom_name", "device_name", "dooya_create_control", "dooya_cover_class"],
            "control_keys": ["id", "name", "enabled", "device_name", "type", "add_value", "pulse_count", "alias", "mireds_max", "mireds_min", "hass_id", "custom_name", "motion_level", "motion_raw"]
        }
    },
    "types": {
        "temperature": {
            "device_class": "temperature",
            "state_class": "measurement",
            "unit_of_measurement": "\u00B0C",
            "type": "sensor"
        },
        "rel_humidity": {
            "device_class": "humidity",
            "unit_of_measurement": "%",
            "state_class": "measurement",
            "type": "sensor"
        },
        "current": {
            "device_class": "current",
            "unit_of_measurement": "A",
            "value_template": "{{ '%.2f' | format(float(value, 0)) }}",
            "state_class": "measurement",
            "type": "sensor"
        },
        "sound_level": {
            "value_template": "{{ int(value, 0) }}",
            "icon": "mdi:volume-high",
            "unit_of_measurement": "dBA",
            "state_class": "measurement",
            "type": "sensor"
        },
        "carbon_dioxide": {
            "device_class": "carbon_dioxide",
            "unit_of_measurement": "ppm",
            "state_class": "measurement",
            "type": "sensor"
        },
        "volatile_organic_compounds_parts": {
            "device_class": "volatile_organic_compounds_parts",
            "unit_of_measurement": "ppb",
            "state_class": "measurement",
            "type": "sensor"
        },
        "lux": {
            "device_class": "illuminance",
            "value_template": "{{ int(value, 0) }}",
            "unit_of_measurement": "lx",
            "state_class": "measurement",
            "type": "sensor"
        },
        "voltage": {
            "device_class": "voltage",
            "unit_of_measurement": "V",
            "state_class": "measurement",
            "type": "sensor"
        },
        "power": {
            "device_class": "power",
            "unit_of_measurement": "W",
            "state_class": "measurement",
            "type": "sensor"
        },
        "percent": {
            "unit_of_measurement": "%",
            "state_class": "measurement",
            "type": "sensor"
        },
        "motion": {
            "device_class": "motion",
            "payload_on": "ON",
            "payload_off": "OFF",
            "value_template": "{{ (int(value, 0) >= {{motion_level}}) | iif('ON', 'OFF') }}",
            "type": "binary_sensor"
        },
        "motion_raw": {
            "state_class": "measurement",
            "type": "sensor"
        },
        "frequency": {
            "device_class": "frequency",
            "unit_of_measurement": "Hz",
            "state_class": "measurement",
            "type": "sensor"
        },
        "energy": {
            "device_class": "energy",
            "state_class": "total_increasing",
            "unit_of_measurement": "kWh",
            "value_template": "{% if is_number(value) and value | float > 0 %}{{ float(value) }}{% else %}{% endif %}",
            "type": "sensor"
        },
        "power_consumption": {
            "device_class": "energy",
            "state_class": "total_increasing",
            "unit_of_measurement": "kWh",
            "value_template": "{% if is_number(value) and value | float > 0 %}{{ float(value) }}{% else %}{% endif %}",
            "type": "sensor"
        },
        "energy_add_value": {
            "device_class": "energy",
            "state_class": "total_increasing",
            "unit_of_measurement": "kWh",
            "value_template": "{% if is_number(value) and value | float > 0 %}{{ float('{{add_value}}') + float(value) }}{% else %}{% endif %}",
            "type": "sensor"
        },
        "moisture": {
            "device_class": "moisture",
            "payload_on": 1,
            "payload_off": 0,
            "type": "binary_sensor"
        },
        "switch": {
            "payload_on": 1,
            "payload_off": 0,
            "command_topic": "{{topic}}/on",
            "type": "switch"
        },
        "switch_state": {
            "payload_on": 1,
            "payload_off": 0,
            "type": "binary_sensor"
        },
        "light": {
            "payload_on": 1,
            "payload_off": 0,
            "command_topic": "{{topic}}/on",
            "type": "light"
        },
        "light_mrgbw": {
            "type": "light"
        },
        "text": {
            "type": "sensor"
        },
        "value": {
            "type": "sensor"
        },
        "range": {
            "command_topic": "{{topic}}/on",
            "type": "number",
            "min": "{{min}}",
            "max": "{{max}}"
        },
        "pushbutton": {
            "payload_press": "1",
            "command_topic": "{{topic}}/on",
            "type": "button"
        },
        "siren": {
            "payload_on": 1,
            "payload_off": 0,
            "command_topic": "{{topic}}/on",
            "command_template": "{{ int(value, 0) }}",
            "type": "siren"
        },
        "cover_dooya": {
            "type": "cover",
            "device_class": "{{dooya_cover_class}}",
            "command_topic": "{{meta_topic}}coverSet",
            "position_topic": "{{base_topic}}Position",
            "set_position_topic": "{{base_topic}}Position/on",
            "position_open": 100,
            "position_closed": 0,
            "disable_availability": true,
            "disable_state_topic": true
        },
        "water": {
            "type": "sensor",
            "device_class": "water",
            "state_class": "total_increasing",
            "value_template": "{% if is_number(value) and value | float > 0 %}{{ '%.3f' | format(float(value) / 1000 * {{pulse_count}}) }}{% else %}{% endif %}",
            "unit_of_measurement": "m\u00B3"
        },
        "water_consumption": {
            "type": "sensor",
            "device_class": "water",
            "value_template": "{% if is_number(value) and value | float > 0 %}{{ float(value) }}{% else %}{% endif %}",
            "state_class": "total_increasing",
            "unit_of_measurement": "m\u00B3"
        },
        "water_flow": {
            "type": "sensor",
            "device_class": "water",
            "value_template": "{% if is_number(value) and value | float > 0 %}{{ float(value) }}{% else %}{% endif %}",
            "unit_of_measurement": "m\u00B3"
        },
        "volume": {

        },
        "volume_state": {
            "type": "sensor"
        }
    },
    "devices": {
        "default": {
            "ignore": ["Serial"],
            "controls": {
                "^Input [0-9](| Single Press| Long Press| Double Press| Shortlong Press) [cC]ounter$": {
                    "type": "text",
                    "icon": "mdi:counter"
                }
            }
        },
        "dooya": {
            "settings": {
                "dooya_create_control": false,
                "device_name": "default",
                "dooya_cover_class": "curtain"
            },
            "controls": {
                "dooya_create_control": {
                    "type": "cover_dooya",
                    "id": "Cover"
                }
            }
        },
        "hwmon": {
            "controls": {
                "Temperature": {
                    "value_template": "{{ int(value, 0) }}"
                }
            }
        },
        "wb-mr6cu": {"alias": "wb-mr6c"},
        "wb-mr6cv3": {"alias": "wb-mr6c"},
        "wb-mr6c": {
            "controls": {
                "^K[0-9]": {
                    "settings": {
                        "type": "switch",
                        "types": ["switch", "light"]
                    }
                }
            }
        },
        "wb-mdm3": {
            "ignore": ["^Channel [0-9]"],
            "controls": {
                "K1": {"type": "light",
                    "brightness_state_topic": "{{base_topic}}Channel 1",
                    "brightness_command_topic": "{{base_topic}}Channel 1/on",
                    "brightness_scale": 100
                },
                "K2": {"type": "light",
                    "brightness_state_topic": "{{base_topic}}Channel 2",
                    "brightness_command_topic": "{{base_topic}}Channel 2/on",
                    "brightness_scale": 100
                },
                "K3": {"type": "light",
                    "brightness_state_topic": "{{base_topic}}Channel 3",
                    "brightness_command_topic": "{{base_topic}}Channel 3/on",
                    "brightness_scale": 100
                }
            }
        },
        "wb-mrgbw-d": {
            "controls": {
                "^RGB$": {
                    "type": "light_mrgbw",
                    "on_command_type": "first",
                    "payload_on": "255;255;255",
                    "payload_off": "0;0;0",
                    "command_topic": "{{topic}}/on",
                    "state_value_template": "{% if value == '0;0;0' %}0;0;0{% else %}255;255;255{% endif %}",
                    "rgb_state_topic": "{{base_topic}}RGB",
                    "rgb_command_topic": "{{base_topic}}RGB/on",
                    "rgb_value_template": "{{ value.split(';') | join(',') }}",
                    "rgb_command_template": "{{ red }};{{ green }};{{ blue }}"
                },
                "^White": {
                    "type": "light_mrgbw",
                    "on_command_type": "brightness",
                    "payload_off": "0",
                    "command_topic": "{{topic}}/on",
                    "state_value_template": "{% if is_number(value) and value | float > 0 %}ON{% else %}0{% endif %}",
                    "brightness_state_topic": "{{topic}}",
                    "brightness_command_topic": "{{topic}}/on",
                    "brightness_scale": 255
                },
                "^Channel (B|R|G|W)": {
                    "type": "light_mrgbw",
                    "on_command_type": "brightness",
                    "payload_off": "0",
                    "command_topic": "{{topic}}/on",
                    "state_value_template": "{% if is_number(value) and value | float > 0 %}ON{% else %}0{% endif %}",
                    "brightness_state_topic": "{{topic}}",
                    "brightness_command_topic": "{{topic}}/on",
                    "brightness_scale": 255
                }
            }
        },
        "wb-mrgbw-d-fw3": {"alias": "wb-led"},
        "wb-led": {
            "ignore": ["Brightness", "Temperature", "RGB Palette", "RGB Strip Hue", "RGB Strip Saturation"],
            "controls": {
                "^Channels? [0-9_]{1,3}": {"type": "light",
                    "brightness_state_topic": "{{topic}} Brightness",
                    "brightness_command_topic": "{{topic}} Brightness/on",
                    "brightness_scale": 100
                },
                "^CCT1": {"type": "light",
                    "brightness_state_topic": "{{base_topic}}CCT1 Brightness",
                    "brightness_command_topic": "{{base_topic}}CCT1 Brightness/on",
                    "brightness_scale": 100,

                    "max_mireds": "{{mireds_max}}",
                    "min_mireds": "{{mireds_min}}",

                    "color_temp_state_topic": "{{base_topic}}CCT1 Temperature",
                    "color_temp_command_topic": "{{base_topic}}CCT1 Temperature/on",
                    "color_temp_value_template": "{{ ((((100 - value | float) / 100) * (this.attributes.max_mireds - this.attributes.min_mireds)) + this.attributes.min_mireds) | round(0) }}",
                    "color_temp_command_template": "{{ (100 - (((value - this.attributes.min_mireds) / (this.attributes.max_mireds - this.attributes.min_mireds)) * 100)) | round(0) }}",

                    "settings": {"mireds_max": 454, "mireds_min": 154}
                },
                "^CCT2": {"type": "light",
                    "brightness_state_topic": "{{base_topic}}CCT2 Brightness",
                    "brightness_command_topic": "{{base_topic}}CCT2 Brightness/on",
                    "brightness_scale": 100,

                    "max_mireds": "{{mireds_max}}",
                    "min_mireds": "{{mireds_min}}",

                    "color_temp_state_topic": "{{base_topic}}CCT2 Temperature",
                    "color_temp_command_topic": "{{base_topic}}CCT2 Temperature/on",
                    "color_temp_value_template": "{{ ((((100 - value | float) / 100) * (this.attributes.max_mireds - this.attributes.min_mireds)) + this.attributes.min_mireds) | round(0) }}",
                    "color_temp_command_template": "{{ (100 - (((value - this.attributes.min_mireds) / (this.attributes.max_mireds - this.attributes.min_mireds)) * 100)) | round(0) }}",

                    "settings": {"mireds_max": 454, "mireds_min": 154}
                },
                "^RGB Strip": {"type": "light",
                    "rgb_state_topic": "{{base_topic}}RGB Palette",
                    "rgb_command_topic": "{{base_topic}}RGB Palette/on",
                    "rgb_value_template": "{{ value.split(';') | join(',') }}",
                    "rgb_command_template": "{{ red }};{{ green }};{{ blue }}"
                }
            }
        },
        "wb-mwac": {
            "controls": {
                "Alarm": {"type": "switch", "icon": "mdi:bullhorn"},
                "^P[12] [cC]ounter": {"type": "water", "settings": {"pulse_count": 1}},
                "^[FS][1-3] [cC]ounter": {
                    "type": "text",
                    "state_class": "total_increasing",
                    "icon": "mdi:counter"
                },
                "^K[0-9]": {
                    "type": "switch",
                    "icon": "mdi:pipe-valve"
                },
                "^F[0-9]$": {
                    "type": "moisture",
                    "settings": {
                        "type": "moisture",
                        "types": ["moisture", "switch"]
                    }
                },
                "^S[0-9]$": {
                    "type": "switch",
                    "settings": {
                        "type": "switch",
                        "types": ["switch", "moisture"]
                    }
                }
            }
        },
        "wb-map6s": {"alias": "wb-map3e"},
        "wb-map3e": {
            "controls": {
                "Frequency": {"type": "frequency"},
                "^P ([0-9]|L[1-3])": {"unit_of_measurement": "W"},
                "^Q ([0-9]|L[1-3])": {"unit_of_measurement": "VAR", "icon": "mdi:flash"},
                "^S ([0-9]|L[1-3])": {"unit_of_measurement": "V*A", "icon": "mdi:flash"},
                "^PF ([0-9]|L[1-3])": {"unit_of_measurement": "%"},
                "^AP energy ([0-9]|L[1-3])": {"type": "energy_add_value", "settings": {"add_value": 0}},
                "^RP energy ([0-9]|L[1-3])": {"type": "energy", "unit_of_measurement": "kVARh"},
                "^Phase angle ([0-9]|L[1-3])": {"unit_of_measurement": "\u00B0", "icon": "mdi:axis-arrow"},
                "^Voltage angle ([0-9]|L[1-3])": {"unit_of_measurement": "\u00B0", "icon": "mdi:axis-arrow"},
                "^Total AP energy": {"type": "energy_add_value", "settings": {"add_value": 0}},
                "^Total RP energy": {"type": "energy", "unit_of_measurement": "kVARh"}
            }
        },
        "wb-msw-v3": {
            "controls": {
                "(Red|Green) LED": {"type": "light"},
                "(Current|Max) Motion": {"type": "motion", "settings": {
                    "motion_level": "100",
                    "type": "motion",
                    "types": ["motion", "motion_raw"]
                }},
                "Buzzer": {"icon": "mdi:bullhorn"},
                "Air Quality": {"type": "volatile_organic_compounds_parts"},
                "CO2": {"type": "carbon_dioxide"}
            }
        },
        "wb-msw-v4": {"alias": "wb-msw-v3"},
        "wbe2-i-opentherm": {
            "controls": {
                "^Burner Modulation Level": {
                    "type": "percent"
                },
                "^Hot Water Setpoint": {
                    "type": "range"
                },
                "^Room Temperature Setpoint": {
                    "type": "range"
                }
            }
        },
        "wb-m1w2": {
            "controls": {
                "^External Sensor": {
                    "type": "temperature"
                }
            }
        }
    }
}
